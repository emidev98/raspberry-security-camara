package services

import (
	"fmt"
	"os/exec"
	"time"
)

// More infor on how to use the libcamera-vid command can be found here:
// https://www.raspberrypi.com/documentation/computers/camera_software.html
type camaraService struct {
	outputFolder string // Folder where to store the files generated by the camara
	time         string // The default value is "5000" (5 seconds). The value zero causes the application to run indefinitely.

	width     string // The width of the video stream e.g. "1280"
	height    string // The height of the video stream e.g. "720"
	framerate string // The framerate of the video stream e.g. "15"

	preview string // "1" = the preview window will be shown. "0" = the preview window will be hidden
	codec   string // "1" = audio enabled "0" = audio disabled
}

func NewCamaraService(outputFolder string) *camaraService {
	return &camaraService{
		outputFolder: outputFolder,
		width:        "1280",
		height:       "720",
		preview:      "0",
		framerate:    "40",
		time:         "30000",
		codec:        "libav",
	}
}

func (s *camaraService) StartRecording() {
	s.stopPreviousRecording()
	for {
		currentTime := time.Now()
		fileName := s.outputFolder + "/" + currentTime.Format(time.RFC3339) + ".mp4"

		cmd := exec.Command(
			"libcamera-vid",
			"--width", s.width,
			"--height", s.height,
			"--qt-preview", s.preview,
			"--framerate", s.framerate,
			"--timeout", s.time,
			"--output", fileName,
			"--codec", s.codec,
		)

		_, err := cmd.Output()

		if err != nil {
			panic(err)
		}
		fmt.Printf("Recording saved as '%s'\n", fileName)
	}
}

func (s *camaraService) stopPreviousRecording() {
	cmd := exec.Command("killall", "libcamera-vid")
	err := cmd.Run()
	if err != nil {
		fmt.Printf("%s\n", err)
	}
}
